import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import {
  Card,
  Table,
  Input,
  Space,
  Typography,
  Button,
  Row,
  Col,
  Modal,
  Form,
  Upload,
  message,
  Popconfirm,
  Image,
} from "antd";
import {
  SearchOutlined,
  PlusOutlined,
  DeleteOutlined,
  EditOutlined,
  UploadOutlined,
} from "@ant-design/icons";
import apiChuyenKhoa from "../../../api/ChuyenKhoa";
import "./AdminSpecialties.css";

const { Title, Text } = Typography;

const AdminSpecialties = () => {
  const [specialties, setSpecialties] = useState([]);
  const [filteredSpecialties, setFilteredSpecialties] = useState([]);
  const [searchName, setSearchName] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [form] = Form.useForm();
  const [editForm] = Form.useForm();
  const [editingSpecialty, setEditingSpecialty] = useState(null);
  const [loading, setLoading] = useState(false);
  const pageSize = 10;

  // --- L·∫•y danh s√°ch chuy√™n khoa ---
  const fetchSpecialties = async () => {
    try {
      const res = await apiChuyenKhoa.getAllChuyenKhoa();
      setSpecialties(res);
      setFilteredSpecialties(res);
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch chuy√™n khoa:", error);
    }
  };

  useEffect(() => {
    fetchSpecialties();
  }, []);

  // --- L·ªçc theo t√™n ---
  useEffect(() => {
    let filtered = specialties;
    if (searchName.trim()) {
      filtered = specialties.filter((item) =>
        item.ten_chuyen_khoa?.toLowerCase().includes(searchName.toLowerCase())
      );
    }
    setFilteredSpecialties(filtered);
    setCurrentPage(1);
  }, [searchName, specialties]);

  const startIndex = (currentPage - 1) * pageSize;
  const currentPageData = filteredSpecialties.slice(
    startIndex,
    startIndex + pageSize
  );
  const totalPages = Math.ceil(filteredSpecialties.length / pageSize);

  // --- Th√™m chuy√™n khoa ---
  const handleAddSpecialty = async (values) => {
    try {
      setLoading(true);
      const data = {
        ten_chuyen_khoa: values.ten_chuyen_khoa,
        mo_ta: values.mo_ta,
        thiet_bi: values.thiet_bi,
        thoi_gian_hoat_dong: values.thoi_gian_hoat_dong,
        hinh_anh: values.hinh_anh,
      };
      await apiChuyenKhoa.createChuyenKhoa(data);
      message.success("Th√™m chuy√™n khoa th√†nh c√¥ng!");
      setIsModalOpen(false);
      form.resetFields();
      fetchSpecialties();
    } catch (error) {
      console.error("L·ªói khi th√™m chuy√™n khoa:", error);
      message.error("Kh√¥ng th·ªÉ th√™m chuy√™n khoa!");
    } finally {
      setLoading(false);
    }
  };

  // --- S·ª≠a chuy√™n khoa ---
  const handleEditClick = (record) => {
    setEditingSpecialty(record);
    editForm.setFieldsValue({
      ten_chuyen_khoa: record.ten_chuyen_khoa,
      mo_ta: record.mo_ta,
      thiet_bi: record.thiet_bi,
      thoi_gian_hoat_dong: record.thoi_gian_hoat_dong,
      hinh_anh: record.hinh_anh,
    });
    setIsEditModalOpen(true);
  };

  const handleUpdateSpecialty = async (values) => {
    try {
      setLoading(true);
      await apiChuyenKhoa.updateChuyenKhoa(editingSpecialty.id_chuyen_khoa, values);
      message.success("C·∫≠p nh·∫≠t chuy√™n khoa th√†nh c√¥ng!");
      setIsEditModalOpen(false);
      fetchSpecialties();
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t chuy√™n khoa:", error);
      message.error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t chuy√™n khoa!");
    } finally {
      setLoading(false);
    }
  };

  // --- X√≥a chuy√™n khoa ---
  const handleDelete = async (id_chuyen_khoa) => {
    try {
      await apiChuyenKhoa.deleteChuyenKhoa(id_chuyen_khoa);
      message.success("ƒê√£ x√≥a chuy√™n khoa!");
      fetchSpecialties();
    } catch (error) {
      console.error("L·ªói khi x√≥a chuy√™n khoa:", error);
      message.error("Kh√¥ng th·ªÉ x√≥a chuy√™n khoa!");
    }
  };

  // --- C·ªôt b·∫£ng ---
  const columns = [
    {
      title: "T√äN CHUY√äN KHOA",
      dataIndex: "ten_chuyen_khoa",
      key: "ten_chuyen_khoa",
      render: (name) => <Text strong>{name}</Text>,
    },
    {
      title: "M√î T·∫¢",
      dataIndex: "mo_ta",
      key: "mo_ta",
      render: (desc) => (
        <Text style={{ color: "#666" }}>
          {desc?.length > 60 ? desc.slice(0, 60) + "..." : desc || "Kh√¥ng"}
        </Text>
      ),
    },
    {
      title: "THI·∫æT B·ªä",
      dataIndex: "thiet_bi",
      key: "thiet_bi",
      render: (device) => device || "Kh√¥ng",
    },
    {
      title: "TH·ªúI GIAN HO·∫†T ƒê·ªòNG",
      dataIndex: "thoi_gian_hoat_dong",
      key: "thoi_gian_hoat_dong",
      render: (time) => time || "Kh√¥ng",
    },
    {
      title: "H√åNH ·∫¢NH",
      dataIndex: "hinh_anh",
      key: "hinh_anh",
      render: (img) =>
        img ? (
          <Image
            src={img}
            alt="H√¨nh ·∫£nh chuy√™n khoa"
            width={60}
            height={60}
            style={{ objectFit: "cover", borderRadius: 6 }}
          />
        ) : (
          "Kh√¥ng c√≥"
        ),
    },
    {
      title: "H√ÄNH ƒê·ªòNG",
      key: "actions",
      render: (_, record) => (
        <Space>
          <Button
            icon={<EditOutlined />}
            type="link"
            onClick={() => handleEditClick(record)}
          >
            S·ª≠a
          </Button>
          <Popconfirm
            title="B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a chuy√™n khoa n√†y?"
            onConfirm={() => handleDelete(record.id_chuyen_khoa)}
            okText="X√≥a"
            cancelText="H·ªßy"
          >
            <Button icon={<DeleteOutlined />} danger type="link">
              X√≥a
            </Button>
          </Popconfirm>
        </Space>
      ),
    },
  ];

  return (
    <div className="admin-specialties-container">
      <Card className="shadow-card">
        {/* Header */}
        <div className="header-section">
          <Title level={3} className="page-title">
            üè• Qu·∫£n l√Ω chuy√™n khoa
          </Title>
          <Text type="secondary">
            Xem, th√™m, l·ªçc v√† qu·∫£n l√Ω c√°c chuy√™n khoa trong h·ªá th·ªëng
          </Text>
        </div>

        {/* B·ªô l·ªçc */}
        <Card size="small" className="filter-card">
          <Row gutter={[16, 16]} align="middle">
            <Col xs={24} sm={12} md={8}>
              <Input
                placeholder="T√¨m theo t√™n chuy√™n khoa..."
                prefix={<SearchOutlined />}
                value={searchName}
                onChange={(e) => setSearchName(e.target.value)}
                size="large"
              />
            </Col>

            <Col xs={24} sm={12} md={8} offset={8} style={{ textAlign: "right" }}>
              <Button
                type="primary"
                icon={<PlusOutlined />}
                size="large"
                onClick={() => setIsModalOpen(true)}
              >
                Th√™m chuy√™n khoa
              </Button>
            </Col>
          </Row>
        </Card>

        {/* B·∫£ng danh s√°ch */}
        <Card className="table-card">
          <Table
            columns={columns}
            dataSource={currentPageData.map((item) => ({
              ...item,
              key: item.id_chuyen_khoa,
            }))}
            pagination={false}
            size="middle"
            scroll={{ x: 1000 }}
          />
        </Card>

        {/* Modal th√™m chuy√™n khoa */}
        <Modal
          title="‚ûï Th√™m chuy√™n khoa m·ªõi"
          open={isModalOpen}
          onCancel={() => setIsModalOpen(false)}
          onOk={() => form.submit()}
          okText="L∆∞u"
          cancelText="H·ªßy"
          confirmLoading={loading}
          width={600}
        >
          <Form layout="vertical" form={form} onFinish={handleAddSpecialty}>
            <Form.Item
              label="T√™n chuy√™n khoa"
              name="ten_chuyen_khoa"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n chuy√™n khoa" }]}
            >
              <Input placeholder="Nh·∫≠p t√™n chuy√™n khoa..." />
            </Form.Item>

            <Form.Item label="M√¥ t·∫£" name="mo_ta">
              <Input.TextArea rows={3} placeholder="M√¥ t·∫£ ng·∫Øn..." />
            </Form.Item>

            <Form.Item label="Thi·∫øt b·ªã" name="thiet_bi">
              <Input placeholder="C√°c thi·∫øt b·ªã chuy√™n d·ª•ng..." />
            </Form.Item>

            <Form.Item label="Th·ªùi gian ho·∫°t ƒë·ªông" name="thoi_gian_hoat_dong">
              <Input placeholder="VD: 7h00 - 17h00" />
            </Form.Item>

            <Form.Item label="H√¨nh ·∫£nh (URL)" name="hinh_anh">
              <Input placeholder="https://example.com/image.jpg" />
            </Form.Item>
          </Form>
        </Modal>

        {/* Modal s·ª≠a chuy√™n khoa */}
        <Modal
          title="‚úèÔ∏è S·ª≠a th√¥ng tin chuy√™n khoa"
          open={isEditModalOpen}
          onCancel={() => setIsEditModalOpen(false)}
          onOk={() => editForm.submit()}
          okText="C·∫≠p nh·∫≠t"
          cancelText="H·ªßy"
          confirmLoading={loading}
          width={600}
        >
          <Form layout="vertical" form={editForm} onFinish={handleUpdateSpecialty}>
            <Form.Item
              label="T√™n chuy√™n khoa"
              name="ten_chuyen_khoa"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n chuy√™n khoa" }]}
            >
              <Input />
            </Form.Item>
            <Form.Item label="M√¥ t·∫£" name="mo_ta">
              <Input.TextArea rows={3} />
            </Form.Item>
            <Form.Item label="Thi·∫øt b·ªã" name="thiet_bi">
              <Input />
            </Form.Item>
            <Form.Item label="Th·ªùi gian ho·∫°t ƒë·ªông" name="thoi_gian_hoat_dong">
              <Input />
            </Form.Item>
            <Form.Item label="H√¨nh ·∫£nh (URL)" name="hinh_anh">
              <Input />
            </Form.Item>
          </Form>
        </Modal>
      </Card>
    </div>
  );
};

export default AdminSpecialties;
