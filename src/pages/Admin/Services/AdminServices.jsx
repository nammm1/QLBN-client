import React, { useEffect, useState } from "react";
import {
  Card,
  Table,
  Input,
  Space,
  Typography,
  Button,
  Row,
  Col,
  Modal,
  Form,
  message,
  Popconfirm,
  Select,
} from "antd";
import {
  SearchOutlined,
  PlusOutlined,
  DeleteOutlined,
  EditOutlined,
} from "@ant-design/icons";
import apiDichVu from "../../../api/DichVu";
import "./AdminServices.css";

const { Title, Text } = Typography;
const { Option } = Select;

const AdminServices = () => {
  const [services, setServices] = useState([]);
  const [filteredServices, setFilteredServices] = useState([]);
  const [searchName, setSearchName] = useState("");
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [form] = Form.useForm();
  const [editForm] = Form.useForm();
  const [editingService, setEditingService] = useState(null);
  const pageSize = 10;

  // --- L·∫•y danh s√°ch d·ªãch v·ª• ---
const fetchServices = async () => {
  try {
    const res = await apiDichVu.getAll();
    setServices(res?.data || []); // Th√™m ?. v√† fallback []
    setFilteredServices(res?.data || []); 
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch d·ªãch v·ª•:", error);
    message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch d·ªãch v·ª•!");
    setServices([]); // Set empty array khi l·ªói
    setFilteredServices([]);
  }
};

  useEffect(() => {
    fetchServices();
  }, []);

  // --- L·ªçc theo t√™n ---
  useEffect(() => {
    let filtered = services;
    if (searchName.trim()) {
      filtered = services.filter((item) =>
        item.ten_dich_vu?.toLowerCase().includes(searchName.toLowerCase())
      );
    }
    setFilteredServices(filtered);
  }, [searchName, services]);

  // --- Th√™m d·ªãch v·ª• ---
  const handleAddService = async (values) => {
    try {
      setLoading(true);
      await apiDichVu.create(values);
      message.success("Th√™m d·ªãch v·ª• th√†nh c√¥ng!");
      setIsModalOpen(false);
      form.resetFields();
      fetchServices();
    } catch (error) {
      console.error("L·ªói khi th√™m d·ªãch v·ª•:", error);
      message.error("Kh√¥ng th·ªÉ th√™m d·ªãch v·ª•!");
    } finally {
      setLoading(false);
    }
  };

  // --- M·ªü modal s·ª≠a ---
  const handleEditClick = (record) => {
    setEditingService(record);
    editForm.setFieldsValue({
      ten_dich_vu: record.ten_dich_vu,
      mo_ta: record.mo_ta,
      don_gia: record.don_gia,
      trang_thai: record.trang_thai,
    });
    setIsEditModalOpen(true);
  };

  // --- C·∫≠p nh·∫≠t d·ªãch v·ª• ---
  const handleUpdateService = async (values) => {
    try {
      setLoading(true);
      await apiDichVu.update(editingService.id_dich_vu, values);
      message.success("C·∫≠p nh·∫≠t d·ªãch v·ª• th√†nh c√¥ng!");
      setIsEditModalOpen(false);
      fetchServices();
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t d·ªãch v·ª•:", error);
      message.error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t d·ªãch v·ª•!");
    } finally {
      setLoading(false);
    }
  };

  // --- X√≥a d·ªãch v·ª• ---
  const handleDelete = async (id_dich_vu) => {
    try {
      await apiDichVu.delete(id_dich_vu);
      message.success("ƒê√£ x√≥a d·ªãch v·ª•!");
      fetchServices();
    } catch (error) {
      console.error("L·ªói khi x√≥a d·ªãch v·ª•:", error);
      message.error("Kh√¥ng th·ªÉ x√≥a d·ªãch v·ª•!");
    }
  };

  // --- C·ªôt b·∫£ng ---
  const columns = [
    {
      title: "T√äN D·ªäCH V·ª§",
      dataIndex: "ten_dich_vu",
      key: "ten_dich_vu",
      render: (name) => <Text strong>{name}</Text>,
    },
    {
      title: "M√î T·∫¢",
      dataIndex: "mo_ta",
      key: "mo_ta",
      render: (desc) => (
        <Text style={{ color: "#666" }}>
          {desc?.length > 60 ? desc.slice(0, 60) + "..." : desc || "Kh√¥ng"}
        </Text>
      ),
    },
    {
      title: "ƒê∆†N GI√Å (VNƒê)",
      dataIndex: "don_gia",
      key: "don_gia",
      render: (price) => (
        <Text strong style={{ color: "#1677ff" }}>
          {price?.toLocaleString("vi-VN")} ‚Ç´
        </Text>
      ),
    },
    {
      title: "TR·∫†NG TH√ÅI",
      dataIndex: "trang_thai",
      key: "trang_thai",
      render: (status) => (
        <Text
          style={{
            color: status === "HoatDong" ? "green" : "red",
            fontWeight: 500,
          }}
        >
          {status === "HoatDong" ? "Ho·∫°t ƒë·ªông" : "Ng·ª´ng"}
        </Text>
      ),
    },
    {
      title: "H√ÄNH ƒê·ªòNG",
      key: "actions",
      render: (_, record) => (
        <Space>
          <Button
            icon={<EditOutlined />}
            type="link"
            onClick={() => handleEditClick(record)}
          >
            S·ª≠a
          </Button>
          <Popconfirm
            title="B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a d·ªãch v·ª• n√†y?"
            onConfirm={() => handleDelete(record.id_dich_vu)}
            okText="X√≥a"
            cancelText="H·ªßy"
          >
            <Button icon={<DeleteOutlined />} danger type="link">
              X√≥a
            </Button>
          </Popconfirm>
        </Space>
      ),
    },
  ];

  return (
<div className="admin-services-container">
        <Card className="shadow-card">
        {/* Header */}
        <div className="header-section">
          <Title level={3} className="page-title">
            üíä Qu·∫£n l√Ω d·ªãch v·ª•
          </Title>
          <Text type="secondary">
            Xem, th√™m, s·ª≠a, x√≥a c√°c d·ªãch v·ª• y t·∫ø trong h·ªá th·ªëng
          </Text>
        </div>

        {/* B·ªô l·ªçc */}
        <Card size="small" className="filter-card">
          <Row gutter={[16, 16]} align="middle">
            <Col xs={24} sm={12} md={8}>
              <Input
                placeholder="T√¨m theo t√™n d·ªãch v·ª•..."
                prefix={<SearchOutlined />}
                value={searchName}
                onChange={(e) => setSearchName(e.target.value)}
                size="large"
              />
            </Col>

            <Col xs={24} sm={12} md={8} offset={8} style={{ textAlign: "right" }}>
              <Button
                type="primary"
                icon={<PlusOutlined />}
                size="large"
                onClick={() => setIsModalOpen(true)}
              >
                Th√™m d·ªãch v·ª•
              </Button>
            </Col>
          </Row>
        </Card>

        {/* B·∫£ng danh s√°ch */}
        <Card className="table-card">
          <Table
            columns={columns}
            dataSource={filteredServices.map((item) => ({
              ...item,
              key: item.id_dich_vu,
            }))}
            pagination={{ pageSize }}
            size="middle"
          />
        </Card>

        {/* Modal th√™m d·ªãch v·ª• */}
        <Modal
          title="‚ûï Th√™m d·ªãch v·ª• m·ªõi"
          open={isModalOpen}
          onCancel={() => setIsModalOpen(false)}
          onOk={() => form.submit()}
          okText="L∆∞u"
          cancelText="H·ªßy"
          confirmLoading={loading}
          width={600}
        >
          <Form layout="vertical" form={form} onFinish={handleAddService}>
            <Form.Item
              label="T√™n d·ªãch v·ª•"
              name="ten_dich_vu"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n d·ªãch v·ª•" }]}
            >
              <Input placeholder="Nh·∫≠p t√™n d·ªãch v·ª•..." />
            </Form.Item>

            <Form.Item label="M√¥ t·∫£" name="mo_ta">
              <Input.TextArea rows={3} placeholder="M√¥ t·∫£ ng·∫Øn..." />
            </Form.Item>

            <Form.Item
              label="ƒê∆°n gi√° (VNƒê)"
              name="don_gia"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ƒë∆°n gi√°" }]}
            >
              <Input type="number" placeholder="VD: 200000" />
            </Form.Item>

            <Form.Item
              label="Tr·∫°ng th√°i"
              name="trang_thai"
              rules={[{ required: true, message: "Vui l√≤ng ch·ªçn tr·∫°ng th√°i" }]}
            >
              <Select placeholder="Ch·ªçn tr·∫°ng th√°i">
                <Option value="HoatDong">Ho·∫°t ƒë·ªông</Option>
                <Option value="Ngung">Ng·ª´ng</Option>
              </Select>
            </Form.Item>
          </Form>
        </Modal>

        {/* Modal s·ª≠a d·ªãch v·ª• */}
        <Modal
          title="‚úèÔ∏è S·ª≠a th√¥ng tin d·ªãch v·ª•"
          open={isEditModalOpen}
          onCancel={() => setIsEditModalOpen(false)}
          onOk={() => editForm.submit()}
          okText="C·∫≠p nh·∫≠t"
          cancelText="H·ªßy"
          confirmLoading={loading}
          width={600}
        >
          <Form layout="vertical" form={editForm} onFinish={handleUpdateService}>
            <Form.Item
              label="T√™n d·ªãch v·ª•"
              name="ten_dich_vu"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n d·ªãch v·ª•" }]}
            >
              <Input />
            </Form.Item>
            <Form.Item label="M√¥ t·∫£" name="mo_ta">
              <Input.TextArea rows={3} />
            </Form.Item>
            <Form.Item
              label="ƒê∆°n gi√° (VNƒê)"
              name="don_gia"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ƒë∆°n gi√°" }]}
            >
              <Input type="number" />
            </Form.Item>
            <Form.Item label="Tr·∫°ng th√°i" name="trang_thai">
              <Select>
                <Option value="HoatDong">Ho·∫°t ƒë·ªông</Option>
                <Option value="Ngung">Ng·ª´ng</Option>
              </Select>
            </Form.Item>
          </Form>
        </Modal>
      </Card>
    </div>
  );
};

export default AdminServices;
