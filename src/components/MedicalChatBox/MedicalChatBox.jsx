import React, { useState, useEffect, useRef } from "react";
import {
  Button,
  Input,
  Avatar,
  Typography,
  Space,
  Tag,
  Spin,
  Empty,
  Tooltip,
} from "antd";
import {
  MessageOutlined,
  CloseOutlined,
  SendOutlined,
  MinusOutlined,
  CustomerServiceOutlined,
  DeleteOutlined,
  ReloadOutlined,
  RobotOutlined,
  UserOutlined,
} from "@ant-design/icons";
import { medicalChatService } from "../../api/MedicalChat";
import "./MedicalChatBox.css";

const { Text } = Typography;
const { TextArea } = Input;

const MedicalChatBox = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputValue, setInputValue] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);
  const chatContainerRef = useRef(null);

  // G·ª£i √Ω c√¢u h·ªèi th∆∞·ªùng g·∫∑p
  const quickQuestions = [
    "C√°c tri·ªáu ch·ª©ng c·∫£m c√∫m th∆∞·ªùng g·∫∑p?",
    "L√†m th·∫ø n√†o ƒë·ªÉ ƒë·∫∑t l·ªãch kh√°m?",
    "Th·ªùi gian l√†m vi·ªác c·ªßa b·ªánh vi·ªán?",
    "L√†m sao ƒë·ªÉ ƒëƒÉng k√Ω kh√°m online?",
    "C√°c d·ªãch v·ª• y t·∫ø hi·ªán c√≥?",
    "Ch·∫ø ƒë·ªô ƒÉn u·ªëng l√†nh m·∫°nh?",
  ];

  // Message kh·ªüi t·∫°o
  const welcomeMessage = {
    id: Date.now(),
    type: "bot",
    content:
      "üëã Xin ch√†o! T√¥i l√† tr·ª£ l√Ω y t·∫ø AI. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ T∆∞ v·∫•n v·ªÅ c√°c tri·ªáu ch·ª©ng b·ªánh th∆∞·ªùng g·∫∑p\n‚Ä¢ H∆∞·ªõng d·∫´n ƒë·∫∑t l·ªãch kh√°m b·ªánh\n‚Ä¢ Th√¥ng tin v·ªÅ c√°c d·ªãch v·ª• y t·∫ø\n‚Ä¢ L·ªùi khuy√™n v·ªÅ s·ª©c kh·ªèe v√† dinh d∆∞·ª°ng\n‚Ä¢ Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ quy tr√¨nh kh√°m b·ªánh\n\nüí° B·∫°n c√≥ th·ªÉ h·ªèi b·∫•t k·ª≥ c√¢u h·ªèi n√†o v·ªÅ y t·∫ø ho·∫∑c ch·ªçn m·ªôt trong c√°c c√¢u h·ªèi g·ª£i √Ω b√™n d∆∞·ªõi!",
    timestamp: new Date(),
  };

  useEffect(() => {
    if (isOpen) {
      // Load chat history on open
      const savedMessages = medicalChatService.loadHistory();
      if (savedMessages.length > 0) {
        setMessages(savedMessages);
      } else {
        setMessages([welcomeMessage]);
      }
    }
  }, [isOpen]);

  useEffect(() => {
    // Save chat history whenever messages change
    if (messages.length > 0 && isOpen) {
      medicalChatService.saveHistory(messages);
    }
  }, [messages, isOpen]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage = {
      id: Date.now(),
      type: "user",
      content: inputValue.trim(),
      timestamp: new Date(),
    };

    const updatedMessages = [...messages, userMessage];
    setMessages(updatedMessages);
    setInputValue("");
    setIsLoading(true);

    try {
      // G·ª≠i conversation history ƒë·ªÉ AI c√≥ context
      const conversationHistory = updatedMessages
        .filter(msg => msg.id !== welcomeMessage.id) // Lo·∫°i b·ªè welcome message
        .map(msg => ({
          type: msg.type,
          content: msg.content
        }));
      
      const response = await medicalChatService.getResponse(inputValue.trim(), conversationHistory);
      const botMessage = {
        id: Date.now() + 1,
        type: "bot",
        content: response.message,
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, botMessage]);
    } catch (error) {
      const errorMessage = {
        id: Date.now() + 1,
        type: "bot",
        content:
          "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi b·ªánh vi·ªán qua hotline: 1900-xxxx ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët h∆°n.",
        timestamp: new Date(),
        isError: true,
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleQuickQuestion = async (question) => {
    if (isLoading) return;
    
    const userMessage = {
      id: Date.now(),
      type: "user",
      content: question,
      timestamp: new Date(),
    };

    const updatedMessages = [...messages, userMessage];
    setMessages(updatedMessages);
    setIsLoading(true);

    try {
      // G·ª≠i conversation history ƒë·ªÉ AI c√≥ context
      const conversationHistory = updatedMessages
        .filter(msg => msg.id !== welcomeMessage.id) // Lo·∫°i b·ªè welcome message
        .map(msg => ({
          type: msg.type,
          content: msg.content
        }));
      
      const response = await medicalChatService.getResponse(question, conversationHistory);
      const botMessage = {
        id: Date.now() + 1,
        type: "bot",
        content: response.message,
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, botMessage]);
    } catch (error) {
      const errorMessage = {
        id: Date.now() + 1,
        type: "bot",
        content:
          "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi b·ªánh vi·ªán qua hotline: 1900-xxxx ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët h∆°n.",
        timestamp: new Date(),
        isError: true,
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleClearChat = () => {
    setMessages([welcomeMessage]);
    medicalChatService.clearHistory();
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const toggleChat = () => {
    setIsOpen(!isOpen);
    if (!isOpen) {
      setIsMinimized(false);
    }
  };

  const handleMinimize = () => {
    setIsMinimized(true);
  };

  const handleExpand = () => {
    setIsMinimized(false);
  };

  const formatTime = (date) => {
    return new Date(date).toLocaleTimeString("vi-VN", {
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  return (
    <div className={`medical-chatbox ${isOpen ? "open" : ""}`}>
      {/* Floating Button */}
      {!isOpen && (
        <Tooltip title="Chat h·ªó tr·ª£ y t·∫ø" placement="left">
          <Button
            type="primary"
            shape="circle"
            size="large"
            icon={<MessageOutlined />}
            onClick={toggleChat}
            className="chatbox-toggle-btn"
          >
            <span className="notification-badge"></span>
          </Button>
        </Tooltip>
      )}

      {/* Chat Window */}
      {isOpen && (
        <div
          className={`chatbox-window ${isMinimized ? "minimized" : "expanded"}`}
          ref={chatContainerRef}
        >
          {/* Header */}
          <div className="chatbox-header">
            <div className="chatbox-header-content">
              <Space>
                <Avatar
                  icon={<RobotOutlined />}
                  className="bot-avatar"
                  size="large"
                />
                <div>
                  <Text strong className="chatbox-title">
                    Tr·ª£ l√Ω Y t·∫ø AI
                  </Text>
                  <div className="chatbox-status">
                    <span className="status-dot"></span>
                    <Text type="secondary" className="status-text">
                      ƒêang ho·∫°t ƒë·ªông
                    </Text>
                  </div>
                </div>
              </Space>
            </div>
            <Space className="chatbox-actions">
              {!isMinimized && (
                <Tooltip title="Thu nh·ªè">
                  <Button
                    type="text"
                    icon={<MinusOutlined />}
                    onClick={handleMinimize}
                    className="action-btn"
                  />
                </Tooltip>
              )}
              {isMinimized && (
                <Tooltip title="M·ªü r·ªông">
                  <Button
                    type="text"
                    icon={<MessageOutlined />}
                    onClick={handleExpand}
                    className="action-btn"
                  />
                </Tooltip>
              )}
              <Tooltip title="ƒê√≥ng">
                <Button
                  type="text"
                  icon={<CloseOutlined />}
                  onClick={toggleChat}
                  className="action-btn"
                />
              </Tooltip>
            </Space>
          </div>

          {/* Chat Content */}
          {!isMinimized && (
            <>
              <div className="chatbox-messages" ref={messagesEndRef}>
                {messages.length === 0 ? (
                  <Empty
                    description="Ch∆∞a c√≥ tin nh·∫Øn n√†o"
                    image={Empty.PRESENTED_IMAGE_SIMPLE}
                    className="empty-messages"
                  />
                ) : (
                  messages.map((message) => (
                    <div
                      key={message.id}
                      className={`message-item ${message.type} ${
                        message.isError ? "error" : ""
                      }`}
                    >
                      <div className="message-wrapper">
                        {message.type === "bot" && (
                          <Avatar
                            icon={<RobotOutlined />}
                            className="message-avatar bot-avatar"
                          />
                        )}
                        {message.type === "user" && (
                          <Avatar
                            icon={<UserOutlined />}
                            className="message-avatar user-avatar"
                          />
                        )}
                        <div className="message-content">
                          <div className="message-bubble">
                            <Text className="message-text">
                              {message.content}
                            </Text>
                            <div className="message-time">
                              {formatTime(message.timestamp)}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))
                )}
                {isLoading && (
                  <div className="message-item bot">
                    <div className="message-wrapper">
                      <Avatar
                        icon={<RobotOutlined />}
                        className="message-avatar bot-avatar"
                      />
                      <div className="message-content">
                        <div className="message-bubble">
                          <Spin size="small" />
                          <Text className="typing-indicator">
                            ƒêang tr·∫£ l·ªùi...
                          </Text>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                <div ref={messagesEndRef} />
              </div>

              {/* Quick Questions */}
              {messages.length === 1 && (
                <div className="quick-questions">
                  <Text type="secondary" className="quick-questions-title">
                    üí° C√¢u h·ªèi th∆∞·ªùng g·∫∑p:
                  </Text>
                  <div className="quick-questions-list">
                    {quickQuestions.map((question, index) => (
                      <Tag
                        key={index}
                        className="quick-question-tag"
                        onClick={() => handleQuickQuestion(question)}
                      >
                        {question}
                      </Tag>
                    ))}
                  </div>
                </div>
              )}

              {/* Input Area */}
              <div className="chatbox-input-area">
                {messages.length > 1 && (
                  <div className="chatbox-actions-bar">
                    <Tooltip title="X√≥a l·ªãch s·ª≠ chat">
                      <Button
                        type="text"
                        icon={<DeleteOutlined />}
                        onClick={handleClearChat}
                        className="action-btn-small"
                        size="small"
                      >
                        X√≥a chat
                      </Button>
                    </Tooltip>
                  </div>
                )}
                <div className="chatbox-input-wrapper">
                  <TextArea
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n v·ªÅ y t·∫ø..."
                    autoSize={{ minRows: 1, maxRows: 4 }}
                    className="chatbox-input"
                    disabled={isLoading}
                  />
                  <Button
                    type="primary"
                    icon={<SendOutlined />}
                    onClick={handleSendMessage}
                    loading={isLoading}
                    disabled={!inputValue.trim() || isLoading}
                    className="chatbox-send-btn"
                  >
                    G·ª≠i
                  </Button>
                </div>
              </div>
            </>
          )}
        </div>
      )}
    </div>
  );
};

export default MedicalChatBox;

